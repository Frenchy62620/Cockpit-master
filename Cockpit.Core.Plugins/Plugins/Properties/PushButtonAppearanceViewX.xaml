<UserControl x:Class="Cockpit.Core.Plugins.Plugins.Properties.PushButtonAppearanceViewX"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:ip="clr-namespace:Cockpit.Core.Common.CustomControls" 
             xmlns:pe="clr-namespace:Cockpit.Core.Plugins.Plugins.Properties"
             xmlns:cal="http://www.caliburnproject.org"
             mc:Ignorable="d"        Height="Auto" d:DesignWidth="180">

    <UserControl.Resources>
        <Style x:Key="LabelGlyphStyle" TargetType="{x:Type Label}">
            <Style.Triggers>
                <DataTrigger Binding="{Binding GlyphSelected}" Value="0">
                    <Setter Property="Visibility" Value="Collapsed" />
                </DataTrigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="ColorWellGlyphStyle" TargetType="{x:Type ip:ColorWellView}">
            <Style.Triggers>
                <DataTrigger Binding="{Binding GlyphSelected}" Value="0">
                    <Setter Property="Visibility" Value="Collapsed" />
                </DataTrigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="TextBoxGlyphStyle" TargetType="{x:Type TextBox}">
            <Style.Triggers>
                <DataTrigger Binding="{Binding GlyphSelected}" Value="0">
                    <Setter Property="Visibility" Value="Collapsed" />
                </DataTrigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="SliderGlyphStyle" TargetType="{x:Type Slider}">
            <Style.Triggers>
                <DataTrigger Binding="{Binding GlyphSelected}" Value="0">
                    <Setter Property="Visibility" Value="Collapsed" />
                </DataTrigger>
            </Style.Triggers>
        </Style>
    </UserControl.Resources>
    <Grid Background="Transparent" Margin="4">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto" />
            <ColumnDefinition Width="*" />
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>
        <TextBlock Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="0" Margin="4,10,2,2" FontSize="12" FontWeight="Bold" Text="Images"/>
        <Label Grid.Column="0" Grid.Row="1" FontSize="10" HorizontalAlignment="Right" Content="Normal"
            ToolTip="Image which will be displayed when the button is not pushed."/>

        <ip:ImagePickerView Grid.Column="1" Grid.Row="1" ImageFilename="{Binding Image, Mode=TwoWay}" />
        <Label Grid.Column="0" Grid.Row="2" FontSize="10" HorizontalAlignment="Right" Content="Pushed"
            ToolTip="Image which will be displayed when the button is pushed."/>

        <ip:ImagePickerView Grid.Column="1" Grid.Row="2" ImageFilename="{Binding PushedImage, Mode=TwoWay}" />

        <TextBlock Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="3" Margin="4,10,2,2" FontSize="12" FontWeight="Bold" Text="Decoration"/>
        <Label Grid.Column="0" Grid.Row="4" FontSize="10" HorizontalAlignment="Right" Content="Symbol"
            ToolTip="Symbol to be rendered on this buttom."/>

        <ComboBox x:Name="PushButtonGlyphs" Grid.Column="1" Grid.Row="4" Margin="4,0,0,0" FontSize="10" HorizontalAlignment="Left"
                  ItemsSource="{Binding Source={pe:EnumBindingSource {x:Type pe:PushButtonGlyph}}}"  SelectedItem="{Binding SelectedPushButtonGlyph}"/>
        <Label Grid.Column="0" Grid.Row="5" FontSize="10" HorizontalAlignment="Right" Style="{StaticResource LabelGlyphStyle}" Content="Thickness"
            ToolTip="Thickness of the symbols lines."/>

        <TextBox Grid.Column="1" Grid.Row="5" FontSize="10" Text="{Binding GlyphThickness, Mode=TwoWay}" Margin="2" Style="{StaticResource TextBoxGlyphStyle}"/>
        <Label Grid.Column="0" Grid.Row="6" FontSize="10" HorizontalAlignment="Right" Style="{StaticResource LabelGlyphStyle}" Content="Color"
            ToolTip="Color of the symbol."/>

        <ip:ColorWellView Grid.Column="1" Grid.Row="6" Color="{Binding GlyphColor, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" HorizontalAlignment="Left" Margin="2" Style="{StaticResource ColorWellGlyphStyle}"/>
        <Label Grid.Column="0" Grid.Row="7" FontSize="10" HorizontalAlignment="Right" Style="{StaticResource LabelGlyphStyle}" Content="Scale"
            ToolTip="How large will the symbol be drawn."/>

        <Slider x:Name="GlyphScale" Grid.Row="7" Grid.Column="1" Minimum="0.1" Maximum="1"  Margin="4" TickPlacement="TopLeft" TickFrequency="0.1" Style="{StaticResource SliderGlyphStyle}" />

        <TextBlock Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="8" Margin="4,10,2,2" FontSize="12" FontWeight="Bold" Text="Text"/>
        <Label Grid.Column="0" Grid.Row="9" FontSize="10" HorizontalAlignment="Right" Content="Text"
            ToolTip="Text which will be displayed on top of the button images."/>

        <TextBox x:Name="GlyphText" Grid.Column="1" Grid.Row="9" FontSize="10" Margin="2" />
        <Label Grid.Column="0" Grid.Row="10" FontSize="10" HorizontalAlignment="Right" Content="Font"
            ToolTip="Font used to render the text."/>

        <ip:FontPickerView Grid.Column="1" Grid.Row="10" TextFormat="{Binding TextFormat}" HorizontalAlignment="Left" Margin="2" />

        <Label Grid.Column="0" Grid.Row="11" FontSize="10" HorizontalAlignment="Right" VerticalAlignment="Top" Content="V Align"
            ToolTip="How the text will be aligned vertically inside the indicator."/>
        <ComboBox x:Name="VAlignTypes" Grid.Column="1" Grid.Row="11" Margin="2" HorizontalAlignment="Left" />

        <Label Grid.Column="0" Grid.Row="12" FontSize="10" HorizontalAlignment="Right" VerticalAlignment="Top" Content="H Align"
            ToolTip="How the text will be aligned horizontally inside the indicator."/>
        <ComboBox x:Name="HAlignTypes"  Grid.Column="1" Grid.Row="12" Margin="2" HorizontalAlignment="Left" />

        <Label Grid.Column="0" Grid.Row="13" FontSize="10" HorizontalAlignment="Right" Content="Color"
            ToolTip="Color in which the text will be rendered."/>
        <ip:ColorWellView Grid.Column="1" Grid.Row="13" Color="{Binding TextColor, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" HorizontalAlignment="Left" Margin="2" />

        <Label Grid.Column="0" Grid.Row="14" FontSize="10" HorizontalAlignment="Right" Content="Push Offset"
            ToolTip="Offset which will be used to move text and decorations when the button is pushed."/>
        <TextBox Grid.Column="1" Grid.Row="14" FontSize="10" Text="{Binding TextPushOffset, Mode=TwoWay}" Margin="2" />

        <TextBlock Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="15" Margin="4,10,2,2" FontSize="12" FontWeight="Bold"  Text="Text Padding"/>
        <Label Grid.Column="0" Grid.Row="16" FontSize="10" HorizontalAlignment="Right" VerticalAlignment="Top" Content="Left"
            ToolTip="Amount of space on the left edge where text will not be rendered. Hold shift to move individually."/>

        <Slider Grid.Column="1" Grid.Row="16" Minimum="0" Maximum="1" Value="{Binding Path=TextFormat.PaddingLeft}" Margin="0,2" 
                cal:Message.Attach="[Event ValueChanged] = [Action LeftPaddingChanged($source, $eventArgs)]" />
        <Label Grid.Column="0" Grid.Row="17" FontSize="10" HorizontalAlignment="Right" VerticalAlignment="Top" Content="Right"
            ToolTip="Amount of space on the right edge where text will not be rendered. Hold shift to move individually."/>

        <Slider Grid.Column="1" Grid.Row="17" Minimum="0" Maximum="1" Value="{Binding Path=TextFormat.PaddingRight}" IsDirectionReversed="True" Margin="0,2"
                cal:Message.Attach="[Event ValueChanged] = [Action RightPaddingChanged($source, $eventArgs)]" />
        <Label Grid.Column="0" Grid.Row="18" FontSize="10" HorizontalAlignment="Right" VerticalAlignment="Top" Content="Top"
            ToolTip="Amount of space on the top edge where text will not be rendered. Hold shift to move individually."/>

        <Slider Grid.Column="1" Grid.Row="18" Minimum="0" Maximum="1" Value="{Binding Path=TextFormat.PaddingTop}" Margin="0,2"
                cal:Message.Attach="[Event ValueChanged] = [Action TopPaddingChanged($source, $eventArgs)]"/>
        <Label Grid.Column="0" Grid.Row="19" FontSize="10" HorizontalAlignment="Right" VerticalAlignment="Top" Content="Bottom"
            ToolTip="Amount of space on the bottom edge where text will not be rendered. Hold shift to move individually."/>

        <Slider Grid.Column="1" Grid.Row="19" Minimum="0" Maximum="1" Value="{Binding Path=TextFormat.PaddingBottom}" IsDirectionReversed="True" Margin="0,2" 
                cal:Message.Attach="[Event ValueChanged] = [Action BottomPaddingChanged($source, $eventArgs)]" />

    </Grid>
</UserControl>
