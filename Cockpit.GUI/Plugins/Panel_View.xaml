<UserControl 
    x:Class="Cockpit.GUI.Plugins.Panel_View"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:cal="http://www.caliburnproject.org"
    xmlns:gg="clr-namespace:GongSolutions.Wpf.DragDrop;assembly=GongSolutions.Wpf.DragDrop"
    mc:Ignorable="d" d:DesignHeight="150" d:DesignWidth="70" ToolTip="{Binding ToolTip}"    Style="{DynamicResource ResourceKey=PanelAnimation1}"
    VerticalAlignment = "Top" HorizontalAlignment = "Left" ClipToBounds="True" Background="Transparent"
    cal:Message.Attach="[Event MouseDown] = [Action MouseLeftButtonDownOnPanelView($source, $mousepoint, $eventArgs)];
                        [Event SizeChanged] = [Action Ichanged($source, $eventArgs)]"  >
    <!--cal:Message.Attach="[Event MouseEnter] = [Action MouseEnter($eventArgs)];
                        [Event MouseDoubleClick] = [Action MouseDoubleClickOnPanel($dataContext, $eventArgs)]"-->
    <UserControl.Resources>

        <Style x:Key="PanelAnimation1" TargetType="{x:Type UserControl}">
            <Setter Property="RenderTransformOrigin" Value="1.0,0.0"/>
            <Setter Property="RenderTransform">
                <Setter.Value>
                    <TransformGroup>
                        <ScaleTransform  />
                        <!--<RotateTransform x:Name="rotation" Angle="{Binding AngleRotation}"/>-->
                    </TransformGroup>
                </Setter.Value>
            </Setter>

            <Style.Triggers>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <!--<Condition Binding="{Binding Path=Initialized}" Value="True"/>-->
                        <Condition Binding="{Binding Path=IsVisible}" Value="False"/>
                        <Condition Binding="{Binding Path=ScaleXX}" Value="True"/>
                    </MultiDataTrigger.Conditions>
                    <Setter Property="RenderTransformOrigin" Value="{Binding Path=RenderO, Converter={StaticResource MyConverterRender}}"/>
                    <MultiDataTrigger.EnterActions>
                        <BeginStoryboard x:Name="BeginXtoLeft">
                            <Storyboard FillBehavior="HoldEnd">
                                <!--<DoubleAnimation Storyboard.TargetProperty="Opacity" From="1" To="0" Duration="0:0:2" AutoReverse="False"/>-->
                                <DoubleAnimation Storyboard.TargetProperty="RenderTransform.Children[0].ScaleX" To="0" Duration="0:0:0.4"/>
                                <!--<DoubleAnimation Storyboard.TargetProperty="(Canvas.Left)" To="0" Duration="0:0:1.2"/>-->
                            </Storyboard>
                        </BeginStoryboard>
                        <!--</DataTrigger.EnterActions>
                                <DataTrigger.ExitActions>-->
                    </MultiDataTrigger.EnterActions>
                    <MultiDataTrigger.ExitActions>
                        <RemoveStoryboard BeginStoryboardName="BeginXtoLeft"/>
                    </MultiDataTrigger.ExitActions>
                </MultiDataTrigger>

                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <!--<Condition Binding="{Binding Path=Initialized}" Value="True"/>-->
                        <Condition Binding="{Binding Path=IsVisible}" Value="True"/>
                        <Condition Binding="{Binding Path=ScaleXX}" Value="True"/>
                    </MultiDataTrigger.Conditions>
                    <Setter Property="RenderTransformOrigin" Value="{Binding Path=RenderO, Converter={StaticResource MyConverterRender}}"/>
                    <MultiDataTrigger.EnterActions>
                        <BeginStoryboard x:Name="CancelXtoLeft">
                            <Storyboard FillBehavior="HoldEnd">
                                <!--<DoubleAnimation Storyboard.TargetProperty="Opacity" From="1" To="0" Duration="0:0:2" AutoReverse="False"/>-->
                                <DoubleAnimation Storyboard.TargetProperty="RenderTransform.Children[0].ScaleX" To="1" Duration="0:0:0.4"/>
                                <!--<DoubleAnimation Storyboard.TargetProperty="(Canvas.Left)" To="0" Duration="0:0:1.2"/>-->
                            </Storyboard>
                        </BeginStoryboard>
                    </MultiDataTrigger.EnterActions>
                    <MultiDataTrigger.ExitActions>
                        <RemoveStoryboard BeginStoryboardName="CancelXtoLeft"/>
                    </MultiDataTrigger.ExitActions>
                </MultiDataTrigger>

                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <!--<Condition Binding="{Binding Path=Initialized}" Value="True"/>-->
                        <Condition Binding="{Binding Path=IsVisible}" Value="False"/>
                        <Condition Binding="{Binding Path=ScaleXX}" Value="False"/>
                    </MultiDataTrigger.Conditions>
                    <Setter Property="RenderTransformOrigin" Value="{Binding Path=RenderO, Converter={StaticResource MyConverterRender}}"/>
                    <MultiDataTrigger.EnterActions>
                        <BeginStoryboard x:Name="BeginYtoUp">
                            <Storyboard FillBehavior="HoldEnd">
                                <!--<DoubleAnimation Storyboard.TargetProperty="Opacity" From="1" To="0" Duration="0:0:2" AutoReverse="False"/>-->
                                <DoubleAnimation Storyboard.TargetProperty="RenderTransform.Children[0].ScaleY" To="0" Duration="0:0:0.4"/>
                                <!--<DoubleAnimation Storyboard.TargetProperty="(Canvas.Left)" To="0" Duration="0:0:1.2"/>-->
                            </Storyboard>
                        </BeginStoryboard>
                    </MultiDataTrigger.EnterActions>
                    <MultiDataTrigger.ExitActions>
                        <RemoveStoryboard BeginStoryboardName="BeginYtoUp"/>
                    </MultiDataTrigger.ExitActions>
                </MultiDataTrigger>

                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <!--<Condition Binding="{Binding Path=Initialized}" Value="True"/>-->
                        <Condition Binding="{Binding Path=IsVisible}" Value="True"/>
                        <Condition Binding="{Binding Path=ScaleXX}" Value="False"/>
                    </MultiDataTrigger.Conditions>
                    <Setter Property="RenderTransformOrigin" Value="{Binding Path=RenderO, Converter={StaticResource MyConverterRender}}"/>
                    <MultiDataTrigger.EnterActions>
                        <BeginStoryboard x:Name="CancelYtoUp">
                            <Storyboard FillBehavior="HoldEnd">
                                <!--<DoubleAnimation Storyboard.TargetProperty="Opacity" From="1" To="0" Duration="0:0:2" AutoReverse="False"/>-->
                                <DoubleAnimation Storyboard.TargetProperty="RenderTransform.Children[0].ScaleY" To="1" Duration="0:0:0.4"/>
                                <!--<DoubleAnimation Storyboard.TargetProperty="(Canvas.Left)" To="0" Duration="0:0:1.2"/>-->
                            </Storyboard>
                        </BeginStoryboard>
                    </MultiDataTrigger.EnterActions>
                    <MultiDataTrigger.ExitActions>
                        <RemoveStoryboard BeginStoryboardName="CancelYtoUp"/>
                    </MultiDataTrigger.ExitActions>
                </MultiDataTrigger>


            </Style.Triggers>
        </Style>



        <DataTemplate x:Key="BoxDragAdorner">
            <Grid x:Name="Over">

                <Rectangle Width="{Binding SelectedToolBoxItem.ImageWidth}" 
                       Height="{Binding SelectedToolBoxItem.ImageHeight}" 
                       StrokeThickness="4" Stroke="Green" />
                <Image  Source="{Binding SelectedToolBoxItem.FullImageName}" 
                            Width="{Binding SelectedToolBoxItem.ImageWidth}" 
                            Height="{Binding SelectedToolBoxItem.ImageHeight}" HorizontalAlignment="Center"
                            />
                <!--, diag:PresentationTraceSources.TraceLevel=High-->
                <!--<TextBlock Text="{Binding FullName}" HorizontalAlignment="Center"/>-->

            </Grid>
        </DataTemplate>
    </UserControl.Resources>

    <Grid  Width="{Binding Path=Layout.Width}" Height="{Binding Path=Layout.Height}" 
            >

                <!--<Rectangle x:Name="MainRectangle" Width="{Binding Path=Layout.Width}" Height="{Binding Path=Layout.Height}" StrokeThickness="4" Stroke="Black" 

                           cal:Message.Attach="[Event MouseLeftButtonDown] = [Action MouseLeftButtonDownOnMonitorView($source, $mousepoint, $eventArgs)];
                                               [Event PreviewKeyDown] = [Action KeyTest($source, $pressedKey)]; 
                                               [Gesture Ctrl+E,A] = [Action KeyTest($source ,$pressedKey)]">


                </Rectangle>-->
        <Rectangle Width="{Binding Layout.Width}" Height="{Binding Layout.Height}" StrokeThickness="4" Stroke="Black" 
                           HorizontalAlignment="Left" VerticalAlignment="Top" Fill="{Binding Appearance.FillColor}" />

        <Rectangle Width="{Binding Layout.Width}" Height="{Binding Layout.Height}" StrokeThickness="4" Stroke="Black" 
                           HorizontalAlignment="Left" VerticalAlignment="Top"
                           gg:DragDrop.DropHandler="{Binding}"
                           gg:DragDrop.IsDropTarget="True"
                           gg:DragDrop.DropAdornerTemplate="{StaticResource BoxDragAdorner}" >
            <Rectangle.Fill>
                <ImageBrush ImageSource="{Binding Appearance.BackgroundImage}" 
                                    Viewport="0,0,1,1" Stretch="Fill"
                                    ViewportUnits="RelativeToBoundingBox" 
                                    TileMode="None" />
            </Rectangle.Fill>
        </Rectangle>
        <ItemsControl ItemsSource="{Binding MyCockpitViewModels}" >
            <ItemsControl.ItemTemplate>
                <DataTemplate>
                    <!--<Border BorderThickness="4" BorderBrush="Red" Visibility="Visible" Margin="0,0,0,0">-->
                    <AdornerDecorator >
                        <ContentControl cal:View.Model="{Binding}" UseLayoutRounding="True"
                            cal:Message.Attach="[Event MouseLeftButtonDown] = [Action MouseLeftButtonDownOnContentControl($source, $dataContext, $eventArgs)];
                                                [Event Loaded] = [Action ContentControlLoaded($source, $dataContext)]">
                            <ContentControl.RenderTransform>
                                <TransformGroup>
                                    <RotateTransform Angle="{Binding Layout.AngleRotation}" />
                                    <ScaleTransform ScaleX="{Binding Layout.ScaleX}" ScaleY="{Binding Layout.ScaleY}"  />
                                </TransformGroup>
                            </ContentControl.RenderTransform>
                        </ContentControl>
                    </AdornerDecorator>
                    <!--</Border>-->
                </DataTemplate>
            </ItemsControl.ItemTemplate>
            <!-- Replace panel with a canvas -->
            <ItemsControl.ItemsPanel>
                <ItemsPanelTemplate>
                    <Canvas />
                </ItemsPanelTemplate>
            </ItemsControl.ItemsPanel>

            <!-- Set position of each element in the canvas -->
            <ItemsControl.ItemContainerStyle>
                <Style TargetType="{x:Type ContentPresenter}">
                    <Setter Property="Canvas.Left" Value="{Binding Layout.UCLeft}" />
                    <Setter Property="Canvas.Top" Value="{Binding Layout.UCTop}" />
                </Style>
            </ItemsControl.ItemContainerStyle>

        </ItemsControl>
    </Grid>
</UserControl>
